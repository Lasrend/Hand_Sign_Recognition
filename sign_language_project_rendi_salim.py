# -*- coding: utf-8 -*-
"""Sign_Language_Project_Rendi_Salim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19qOVIu7uAk7rf0URLjVVrL9bB8VO3KNP

# Nama: Rendi Salim
# Email: rendisalim10@gmail.com
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd //

!pip install -q kaggle
from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!ls ~/.kaggle
!chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d datamunge/sign-language-mnist -p /SignLanguageProject

#Extract data 
import zipfile, os
localZip = '/SignLanguageProject/sign-language-mnist.zip'
zipRef = zipfile.ZipFile(localZip, 'r')
zipRef.extractall('/SignLanguageProject/data')
zipRef.close()

# Commented out IPython magic to ensure Python compatibility.
# %cd /SignLanguageProject/data/sign_mnist_train

import pandas as pd

sign = pd.read_csv('sign_mnist_train.csv')
sign.head()

sign['label'].value_counts().sort_index()

print('Jumlah Pixel Gambar: ', sign.shape[1])
print('Jumlah Dataset: ', sign.shape[0])

pixel = sign.iloc[:, 1:]
label = sign['label']
print(pixel.shape)
print(label.shape)

#mengubah label menjadi letter
alphabet = 'abcdefghijklmnopqrstuvwxyz'
letter = {}

for i,j in enumerate(alphabet):
  letter[i] = j

#Plot Sample Gambar
import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=4, ncols=6, figsize=(8, 8),
                        subplot_kw={'xticks': [], 'yticks': []})

for i, ax in enumerate(axes.flat):
  if i >= 9:
    i += 1
  img = sign[sign['label'] == i].iloc[0].drop('label', axis = 0).values.reshape(28,28)
  ax.imshow(img)
  title = letter[sign[sign['label'] == i].iloc[0,0]]
  ax.set_title(title.upper(), fontsize = 15)
plt.show()

#Split data
from sklearn.model_selection import train_test_split

xTrain, xTest, yTrain, yTest = train_test_split(pixel, label, random_state = 42, test_size = 0.2)

print(len(xTrain))

import seaborn as sns

jumlahDataPerClass = pd.Series(yTrain).value_counts().sort_index()
plt.figure(figsize=(10,3))
sns.barplot(x = jumlahDataPerClass.index, y = jumlahDataPerClass)
plt.title('Jumlah Data Setiap Class')
plt.show()

#Balancing Class

from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state = 42)
xTrainBalance, yTrainBalance = smote.fit_resample(xTrain, yTrain)

jumlahDataPerClass = pd.Series(yTrainBalance).value_counts().sort_index()
plt.figure(figsize=(10,3))
sns.barplot(x = jumlahDataPerClass.index, y = jumlahDataPerClass)
plt.title('Jumlah Data Setiap Class')
plt.show()

#reshape data

print('Before X Train Reshape: ', xTrainBalance.shape)
xTrainBalance = xTrainBalance.reshape(-1,28,28,1)
print('After X Train Reshape: ', xTrainBalance.shape)
print('Y Train Shape: ', yTrainBalance.shape)

print('Before X Test Reshape: ', xTest.shape)
xTest = xTest.values.reshape(-1,28,28,1)
print('After X Train Reshape: ', xTest.shape)
print('Y Test Shape: ', yTest.shape)

#Data Augmentation
from tensorflow.keras.preprocessing.image import ImageDataGenerator

trainDataGen = ImageDataGenerator(
    rescale = 1./255,
    zoom_range = 0.1,
    shear_range = 0.1,
    rotation_range = 5,
    height_shift_range = 0.05,
    width_shift_range = 0.05,
    horizontal_flip = True,
    fill_mode = 'nearest'
)

valDataGen = ImageDataGenerator(
    rescale = 1./255
)

#Buat Data Training dan Validation
trainGenerator = trainDataGen.flow(xTrainBalance,
                                   yTrainBalance,
                                   batch_size = 32)

valGenerator = valDataGen.flow(xTest,
                               yTest,
                               batch_size = 32)

#Callback 
import tensorflow as tf

class Callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.92 and logs.get('val_accuracy') > 0.92):
      self.model.stop_training = True

callbacks = Callback()

#Reduce learning rate
from tensorflow.keras.callbacks import ReduceLROnPlateau
reduceLR = ReduceLROnPlateau(
    monitor = 'val_loss',
    factor = 0.2,
    patience = 5,
    min_lr = 1e-4
)

import tensorflow as tf

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu', padding = 'same', input_shape = (28,28,1)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.MaxPooling2D((2,2), padding = 'same'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.MaxPooling2D((2,2), padding = 'same'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation = 'sigmoid'),
    tf.keras.layers.Dense(256, activation = 'relu'),
    tf.keras.layers.Dense(25, activation = 'softmax')
])

model.summary()

model.compile(optimizer=tf.optimizers.Adam(),
              loss= 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

history = model.fit(
    trainGenerator,
    batch_size = 32,
    epochs = 20,
    validation_data = valGenerator,
    validation_steps = 32,
    verbose = 2,
    callbacks = [callbacks, reduceLR]
)

#plot
plt.figure(figsize = (8,6))

trainAcc = history.history['accuracy']
valAcc = history.history['val_accuracy']
trainLoss = history.history['loss']
valLoss = history.history['val_loss']
epoch = range(len(trainAcc))


plt.figure(figsize=(15,3))

#Akurasi Plot
plt.figure(figsize=(15,3))
plt.subplot(1,2,2)
plt.plot(epoch, trainAcc,
         epoch, valAcc)
plt.title('Train Akurasi vs Val Akurasi')
plt.xlabel('Epoch')
plt.ylabel('Akurasi')
plt.legend(['Train Akurasi', 'Val Akurasi'], loc = 0)
plt.show()

plt.tight_layout(pad=1)

#Loss Plot
plt.figure(figsize=(15,3))
plt.subplot(2,2,1)
plt.plot(epoch, trainLoss,
         epoch, valLoss)
plt.title('Train Loss vs Val Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train Loss', 'Val Loss'], loc = 0)
plt.show()

"""# Memprediksi Data yang belum pernah dilihat """

# Commented out IPython magic to ensure Python compatibility.
# %cd /SignLanguageProject/data/sign_mnist_test

signTest = pd.read_csv('sign_mnist_test.csv')
signTest.head()

pixelTest = signTest.iloc[:4, 1:]
labelTest = signTest['label'].iloc[:4]

# pixelTest = pixelTest.values.reshape(28,28)
print(pixelTest.shape)

import numpy as np
predict = model.predict(pixelTest.values.reshape(-1,28,28,1))
predict = np.argmax(predict ,axis = 1)

predict_letter = [letter[i] for i in predict]
actual_letter = [letter[i] for i in labelTest]

print('Actual Letter: ', actual_letter)
print('Predict Letter: ', predict_letter)

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(6, 6),
                        subplot_kw={'xticks': [], 'yticks': []})

for i, ax in enumerate(axes.flat):
  img = pixelTest.iloc[i].values.reshape(28,28)
  ax.imshow(img)
  title = f"Predict: {predict_letter[i].upper()}, Actual: {actual_letter[i].upper()}"
  ax.set_title(title, fontsize = 15)
plt.show()

"""# Mengubah menjadi TF-Lite model"""

#menyimpan model dalam TF-Lite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tfLiteModel = converter.convert()

with tf.io.gfile.GFile('/SignLanguageProject/data/model.tflite', 'wb') as f:
  f.write(tfLiteModel)

